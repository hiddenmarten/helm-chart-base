suite: Secrets template
templates:
  - templates/secrets.tpl

tests:
  - it: renders Secrets with environment variables
    set:
      secrets:
        envVars:
          data:
            DATABASE_PASSWORD: secret-password
            API_KEY: secret-api-key
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-env-vars
      - isNotEmpty:
          path: data.DATABASE_PASSWORD
      - isNotEmpty:
          path: data.API_KEY

  - it: renders Secrets with file data
    set:
      secrets:
        files:
          data:
            "tls.crt": |
              -----BEGIN CERTIFICATE-----
              MIICert...
              -----END CERTIFICATE-----
            "tls.key": |
              -----BEGIN PRIVATE KEY-----
              MIIKey...
              -----END PRIVATE KEY-----
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-files
      - isNotEmpty:
          path: data["tls.crt"]
      - isNotEmpty:
          path: data["tls.key"]

  - it: renders multiple Secrets when both files and envVars are defined
    set:
      secrets:
        files:
          data:
            "cert.pem": "certificate content"
        envVars:
          data:
            SECRET_TOKEN: token-value
    asserts:
      - hasDocuments:
          count: 2

  - it: renders Secret with custom name and type
    set:
      secrets:
        tls-secret:
          type: kubernetes.io/tls
          data:
            tls.crt: certificate-data
            tls.key: private-key-data
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-tls-secret
      - equal:
          path: type
          value: kubernetes.io/tls
      - isNotEmpty:
          path: data["tls.crt"]
      - isNotEmpty:
          path: data["tls.key"]

  - it: renders Secret with annotations
    set:
      secrets:
        files:
          metadata:
            annotations:
              custom-annotation: custom-value
              another-annotation: another-value
          data:
            "test.key": "test content"
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.annotations["custom-annotation"]
          value: custom-value
      - equal:
          path: metadata.annotations["another-annotation"]
          value: another-value

  - it: should not render when secrets.files.enabled is false
    set:
      secrets:
        files:
          enabled: false
          data:
            "test.key": "test content"
        envVars:
          data:
            SECRET_TOKEN: token-value
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-env-vars

  - it: should not render when secrets.envVars.enabled is false
    set:
      secrets:
        files:
          data:
            "test.key": "test content"
        envVars:
          enabled: false
          data:
            SECRET_TOKEN: token-value
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-files

  - it: should not render when secrets data is empty
    set:
      secrets:
        files:
          data: {}
        envVars:
          data: {}
    asserts:
      - hasDocuments:
          count: 0

  - it: should not render when secrets data is not defined
    set:
      secrets:
        files: {}
        envVars: {}
    asserts:
      - hasDocuments:
          count: 0

  - it: should not render files secret when only files data is empty
    set:
      secrets:
        files:
          data: {}
        envVars:
          data:
            SECRET_TOKEN: token-value
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-env-vars

  - it: should not render envVars secret when only envVars data is empty
    set:
      secrets:
        files:
          data:
            "test.key": "test content"
        envVars:
          data: {}
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-files

  - it: should render with default enabled state
    set:
      secrets:
        envVars:
          data:
            SECRET_TOKEN: token-value
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-env-vars

  - it: renders Secret with custom labels
    set:
      secrets:
        envVars:
          metadata:
            labels:
              custom-label: custom-value
              environment: production
          data:
            SECRET_TOKEN: token-value
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.labels["custom-label"]
          value: custom-value
      - equal:
          path: metadata.labels["environment"]
          value: production
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: base-test
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: RELEASE-NAME

  - it: renders Secret with both custom labels and annotations
    set:
      secrets:
        envVars:
          metadata:
            labels:
              team: backend
            annotations:
              description: "API secrets"
              owner: "platform-team"
          data:
            API_KEY: secret-key
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.labels["team"]
          value: backend
      - equal:
          path: metadata.annotations["description"]
          value: "API secrets"
      - equal:
          path: metadata.annotations["owner"]
          value: "platform-team"

  - it: renders Secret with stringData
    set:
      secrets:
        config:
          stringData:
            username: admin
            password: super-secret
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-config
      - equal:
          path: stringData.username
          value: admin
      - equal:
          path: stringData.password
          value: super-secret

  - it: renders Secret with mixed data and stringData
    set:
      secrets:
        mixed:
          data:
            encoded-key: dGVzdC12YWx1ZQ==
          stringData:
            plain-key: plain-value
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-mixed
      - equal:
          path: data["encoded-key"]
          value: dGVzdC12YWx1ZQ==
      - equal:
          path: stringData["plain-key"]
          value: plain-value

  - it: renders Secret with custom type and stringData
    set:
      secrets:
        docker-registry:
          type: kubernetes.io/dockerconfigjson
          stringData:
            .dockerconfigjson: |
              {
                "auths": {
                  "registry.example.com": {
                    "username": "user",
                    "password": "pass"
                  }
                }
              }
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-docker-registry
      - equal:
          path: type
          value: kubernetes.io/dockerconfigjson
      - isNotEmpty:
          path: stringData[".dockerconfigjson"]

  - it: renders Secret with templated values
    release:
      name: test-app
      namespace: production
    set:
      secrets:
        config:
          metadata:
            annotations:
              app-name: "{{ .Release.Name }}"
              namespace: "{{ .Release.Namespace }}"
          stringData:
            app-name: "{{ .Release.Name }}"
            environment: production
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.annotations["app-name"]
          value: test-app
      - equal:
          path: metadata.annotations["namespace"]
          value: production
      - equal:
          path: stringData["app-name"]
          value: test-app

  - it: renders files Secret with different file types
    set:
      secrets:
        files:
          data:
            "config.yaml":
              database:
                host: db.example.com
            "config.json":
              api:
                endpoint: "https://api.example.com"
            "config.toml":
              server:
                port: 8080
            "simple.txt": "plain text content"
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-files
      - isNotEmpty:
          path: data["config"]
      - isNotEmpty:
          path: data["config"]
      - isNotEmpty:
          path: data["config"]
      - isNotEmpty:
          path: data["simple.txt"]

  - it: should not render Secret with empty metadata annotations
    set:
      secrets:
        envVars:
          metadata:
            annotations: {}
          data:
            SECRET_TOKEN: token-value
    asserts:
      - isKind:
          of: Secret
      - notExists:
          path: metadata.annotations

  - it: renders Secret with explicit Opaque type
    set:
      secrets:
        basic:
          type: Opaque
          data:
            key: value
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: type
          value: Opaque

  - it: renders multiple Secrets with different configurations
    set:
      secrets:
        database:
          type: Opaque
          metadata:
            labels:
              component: database
            annotations:
              description: "Database credentials"
          stringData:
            username: dbuser
            password: dbpass
        registry:
          type: kubernetes.io/dockerconfigjson
          metadata:
            labels:
              component: registry
          stringData:
            .dockerconfigjson: '{"auths":{}}'
        tls:
          type: kubernetes.io/tls
          data:
            tls.crt: Y2VydGlmaWNhdGU=
            tls.key: cHJpdmF0ZWtleQ==
    asserts:
      - hasDocuments:
          count: 3
