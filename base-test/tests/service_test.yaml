suite: Service template
templates:
  - templates/service.tpl

tests:
  - it: renders a Service with basic configuration
    set:
      service:
        spec:
          ports:
            http:
              port: 8080
    asserts:
      - isKind:
          of: Service
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test
      - equal:
          path: spec.ports[0].port
          value: 8080
      - equal:
          path: spec.ports[0].name
          value: http

  - it: renders a Service with multiple ports
    set:
      service:
        spec:
          ports:
            http:
              port: 8080
              targetPort: 8080
            metrics:
              port: 9090
              targetPort: 9090
    asserts:
      - isKind:
          of: Service
      - lengthEqual:
          path: spec.ports
          count: 2
      - contains:
          path: spec.ports
          content:
            name: http
            port: 8080
            targetPort: 8080
      - contains:
          path: spec.ports
          content:
            name: metrics
            port: 9090
            targetPort: 9090

  - it: renders a Service with custom type
    set:
      service:
        spec:
          type: LoadBalancer
          ports:
            http:
              port: 80
    asserts:
      - isKind:
          of: Service
      - equal:
          path: spec.type
          value: LoadBalancer

  - it: renders a Service with selector labels
    set:
      service:
        spec:
          ports:
            http:
              port: 8080
    asserts:
      - isKind:
          of: Service
      - equal:
          path: spec.selector["app.kubernetes.io/name"]
          value: base-test
      - equal:
          path: spec.selector["app.kubernetes.io/instance"]
          value: RELEASE-NAME

  - it: should not render when service is disabled
    set:
      service:
        enabled: false
        spec:
          ports:
            http:
              port: 8080
    asserts:
      - hasDocuments:
          count: 0

  - it: should not render when service ports are empty
    set:
      service:
        enabled: true
        spec:
          ports: {}
    asserts:
      - hasDocuments:
          count: 0

  - it: should not render when service ports are not defined
    set:
      service:
        enabled: true
        spec: {}
    asserts:
      - hasDocuments:
          count: 0

  - it: should render with default enabled state
    set:
      service:
        spec:
          ports:
            http:
              port: 8080
    asserts:
      - isKind:
          of: Service
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test

  - it: renders Service with custom labels
    set:
      service:
        metadata:
          labels:
            custom-label: custom-value
            environment: production
            tier: frontend
        spec:
          ports:
            http:
              port: 80
    asserts:
      - isKind:
          of: Service
      - equal:
          path: metadata.labels["custom-label"]
          value: custom-value
      - equal:
          path: metadata.labels["environment"]
          value: production
      - equal:
          path: metadata.labels["tier"]
          value: frontend
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: base-test
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: RELEASE-NAME

  - it: renders Service with annotations
    set:
      service:
        metadata:
          annotations:
            custom-annotation: custom-value
            service.beta.kubernetes.io/aws-load-balancer-type: nlb
        spec:
          type: LoadBalancer
          ports:
            http:
              port: 80
    asserts:
      - isKind:
          of: Service
      - equal:
          path: metadata.annotations["custom-annotation"]
          value: custom-value
      - equal:
          path: metadata.annotations["service.beta.kubernetes.io/aws-load-balancer-type"]
          value: nlb

  - it: renders Service with both custom labels and annotations
    set:
      service:
        metadata:
          labels:
            team: platform
          annotations:
            description: "Main application service"
            owner: "platform-team"
        spec:
          ports:
            api:
              port: 8080
              targetPort: 8080
    asserts:
      - isKind:
          of: Service
      - equal:
          path: metadata.labels["team"]
          value: platform
      - equal:
          path: metadata.annotations["description"]
          value: "Main application service"
      - equal:
          path: metadata.annotations["owner"]
          value: "platform-team"

  - it: renders Service with templated values
    release:
      name: test-app
      namespace: production
    set:
      service:
        metadata:
          annotations:
            app-name: "{{ .Release.Name }}"
            namespace: "{{ .Release.Namespace }}"
        spec:
          type: ClusterIP
          ports:
            http:
              port: 80
    asserts:
      - isKind:
          of: Service
      - equal:
          path: metadata.annotations["app-name"]
          value: test-app
      - equal:
          path: metadata.annotations["namespace"]
          value: production
      - equal:
          path: spec.type
          value: ClusterIP

  - it: should not render Service with empty metadata annotations
    set:
      service:
        metadata:
          annotations: {}
        spec:
          ports:
            http:
              port: 8080
    asserts:
      - isKind:
          of: Service
      - notExists:
          path: metadata.annotations

  - it: renders Service with default ClusterIP type
    set:
      service:
        spec:
          ports:
            http:
              port: 8080
    asserts:
      - isKind:
          of: Service
      - equal:
          path: spec.selector["app.kubernetes.io/name"]
          value: base-test
      - equal:
          path: spec.selector["app.kubernetes.io/instance"]
          value: RELEASE-NAME

  - it: renders Service with NodePort type and nodePort
    set:
      service:
        spec:
          type: NodePort
          ports:
            http:
              port: 80
              targetPort: 8080
              nodePort: 30080
    asserts:
      - isKind:
          of: Service
      - equal:
          path: spec.type
          value: NodePort
      - equal:
          path: spec.ports[0].nodePort
          value: 30080

  - it: renders Service with external IPs
    set:
      service:
        spec:
          type: ClusterIP
          externalIPs:
            - 192.168.1.100
            - 192.168.1.101
          ports:
            http:
              port: 80
    asserts:
      - isKind:
          of: Service
      - equal:
          path: spec.externalIPs[0]
          value: 192.168.1.100
      - equal:
          path: spec.externalIPs[1]
          value: 192.168.1.101

  - it: renders Service with session affinity
    set:
      service:
        spec:
          sessionAffinity: ClientIP
          sessionAffinityConfig:
            clientIP:
              timeoutSeconds: 3600
          ports:
            http:
              port: 80
    asserts:
      - isKind:
          of: Service
      - equal:
          path: spec.sessionAffinity
          value: ClientIP
      - equal:
          path: spec.sessionAffinityConfig.clientIP.timeoutSeconds
          value: 3600
