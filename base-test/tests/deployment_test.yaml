suite: Deployment template
templates:
  - templates/deployment.tpl

tests:
  - it: renders a Deployment with basic configuration
    set:
      deployment:
        spec:
          template:
            spec:
              containers:
                nginx:
                  image:
                    repository: nginx
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test
      - equal:
          path: spec.template.spec.containers[0].image
          value: nginx:latest

  - it: renders a Deployment with custom name
    skip:
      reason: "YAML formatting issue needs investigation"
    set:
      deployment:
        spec:
          template:
            spec:
              containers:
                nginx:
                  image:
                    repository: nginx
      fullnameOverride: custom-app
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: custom-app

  - it: renders a Deployment with replica count
    skip:
      reason: "under implementation"
    set:
      deployment:
        replicas: 3
        spec:
          template:
            spec:
              containers:
                nginx:
                  image:
                    repository: nginx
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.replicas
          value: 3

  - it: renders a Deployment with environment variables from configMaps
    set:
      deployment:
        spec:
          template:
            spec:
              containers:
                nginx:
                  image:
                    repository: nginx
      configMaps:
        envVars:
          data:
            TEST_VAR: test_value
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            configMapRef:
              name: RELEASE-NAME-base-test-env-vars

  - it: renders a Deployment with environment variables from secrets
    set:
      deployment:
        spec:
          template:
            spec:
              containers:
                nginx:
                  image:
                    repository: nginx
      secrets:
        envVars:
          data:
            SECRET_VAR: secret_value
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: RELEASE-NAME-base-test-env-vars

  - it: renders a Deployment with resource limits
    skip:
      reason: "under implementation"
    set:
      deployment:
        spec:
          template:
            spec:
              containers:
                nginx:
                  image:
                    repository: nginx
                  resources:
                    limits:
                      cpu: 100m
                      memory: 128Mi
                    requests:
                      cpu: 50m
                      memory: 64Mi
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 100m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 64Mi

  - it: should render deployment with only image configured
    set:
      deployment:
        spec:
          template:
            spec:
              containers:
                nginx:
                  image:
                    repository: nginx
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test
      - equal:
          path: spec.template.spec.containers[0].image
          value: nginx:latest

  - it: should not render envFrom when no config maps or secrets have data
    set:
      deployment:
        spec:
          template:
            spec:
              containers:
                nginx:
                  image:
                    repository: nginx
      configMaps:
        envVars:
          data: {}
      secrets:
        envVars:
          data: {}
    asserts:
      - isKind:
          of: Deployment
      - notExists:
          path: spec.template.spec.containers[0].envFrom

  - it: should not render ports when service.ports is empty
    set:
      deployment:
        spec:
          template:
            spec:
              containers:
                nginx:
                  image:
                    repository: nginx
      service:
        ports: {}
    asserts:
      - isKind:
          of: Deployment
      - notExists:
          path: spec.template.spec.containers[0].ports
