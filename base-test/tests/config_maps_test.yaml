suite: ConfigMaps template
templates:
  - templates/config_maps.tpl

tests:
  - it: different format of files
    set:
      configMaps:
        files:
          data:
            "/app/file.txt": |
              content
            "/app/file.json":
              key: value
            "/app/file.yaml":
              key: value
            "/app/file.toml":
              key: value
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-files
      - equal:
          path: data["___app___file.txt"]
          value: |
            content
      - equal:
          path: data["___app___file.json"]
          value: |
            {"key":"value"}
      - equal:
          path: data["___app___file.yaml"]
          value: |
            key: value
      - equal:
          path: data["___app___file.toml"]
          value: |
            key = "value"

  - it: renders ConfigMaps with environment variables
    set:
      configMaps:
        envVars:
          data:
            DATABASE_URL: postgresql://localhost:5432/mydb
            LOG_LEVEL: info
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-env-vars
      - equal:
          path: data.DATABASE_URL
          value: postgresql://localhost:5432/mydb
      - equal:
          path: data.LOG_LEVEL
          value: info

  - it: renders multiple ConfigMaps when both files and envVars are defined
    set:
      configMaps:
        files:
          data:
            "config.yaml": |
              server:
                port: 8080
        envVars:
          data:
            APP_ENV: production
    asserts:
      - hasDocuments:
          count: 2

  - it: renders ConfigMap with custom name
    set:
      configMaps:
        custom-config:
          data:
            key1: value1
            key2: value2
          binaryData:
            certificate.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-custom-config
      - equal:
          path: data.key1
          value: value1
      - equal:
          path: binaryData["certificate.crt"]
          value: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t

  - it: renders ConfigMap with annotations
    set:
      configMaps:
        files:
          metadata:
            annotations:
              custom-annotation: custom-value
          data:
            "test.conf": "test content"
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: metadata.annotations["custom-annotation"]
          value: custom-value

  - it: should not render when configMaps is disabled
    set:
      configMaps:
        files:
          enabled: false
          data:
            "config.yaml": |
              server:
                port: 8080
        envVars:
          enabled: false
          data:
            APP_ENV: production
    asserts:
      - hasDocuments:
          count: 0

  - it: should not render when no data is defined
    set:
      configMaps:
        files:
          data: {}
        envVars:
          data: {}
    asserts:
      - hasDocuments:
          count: 0

  - it: renders ConfigMap with custom labels
    set:
      configMaps:
        custom-config:
          metadata:
            labels:
              environment: production
              tier: backend
              version: v1.2.3
          data:
            config.yaml: |
              database:
                host: localhost
                port: 5432
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-custom-config
      - equal:
          path: metadata.labels.environment
          value: production
      - equal:
          path: metadata.labels.tier
          value: backend
      - equal:
          path: metadata.labels.version
          value: v1.2.3
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: base-test
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: RELEASE-NAME

  - it: renders ConfigMap with templated values
    release:
      name: test-app
      namespace: production
    set:
      configMaps:
        config:
          metadata:
            annotations:
              app-name: "{{ .Release.Name }}"
              namespace: "{{ .Release.Namespace }}"
              chart-version: "{{ .Chart.Version }}"
          data:
            app-name: "{{ .Release.Name }}"
            environment: production
            chart-name: "{{ .Chart.Name }}"
            release-info: "App {{ .Release.Name }} in {{ .Release.Namespace }}"
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: metadata.annotations["app-name"]
          value: test-app
      - equal:
          path: metadata.annotations["namespace"]
          value: production
      - equal:
          path: metadata.annotations["chart-version"]
          value: 0.0.1
      - equal:
          path: data["app-name"]
          value: test-app
      - equal:
          path: data["environment"]
          value: production
      - equal:
          path: data["chart-name"]
          value: base-test
      - equal:
          path: data["release-info"]
          value: "App test-app in production"
