suite: PersistentVolumeClaims template
templates:
  - templates/persistent_volume_claims.tpl

tests:
  - it: renders a PersistentVolumeClaim with basic configuration
    set:
      persistentVolumeClaims:
        data:
          mount:
            mountPath: "/var/lib/data"
          spec:
            resources:
              requests:
                storage: 10Gi
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-data
      - equal:
          path: spec.resources.requests.storage
          value: 10Gi
      - contains:
          path: spec.accessModes
          content: ReadWriteOnce

  - it: renders a PersistentVolumeClaim with custom access modes
    set:
      persistentVolumeClaims:
        storage:
          mount:
            mountPath: "/var/lib/storage"
          spec:
            accessModes:
              - ReadWriteMany
              - ReadOnlyMany
            resources:
              requests:
                storage: 5Gi
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-storage
      - contains:
          path: spec.accessModes
          content: ReadWriteMany
      - contains:
          path: spec.accessModes
          content: ReadOnlyMany
      - lengthEqual:
          path: spec.accessModes
          count: 2

  - it: renders a PersistentVolumeClaim with storage class
    set:
      persistentVolumeClaims:
        file:
          mount:
            mountPath: "/var/lib/file"
          spec:
            storageClassName: fast-ssd
            resources:
              requests:
                storage: 1Gi
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - equal:
          path: spec.storageClassName
          value: fast-ssd

  - it: renders multiple PersistentVolumeClaims
    set:
      persistentVolumeClaims:
        data:
          mount:
            mountPath: "/var/lib/data"
          spec:
            resources:
              requests:
                storage: 10Gi
        logs:
          mount:
            mountPath: "/var/lib/logs"
          spec:
            resources:
              requests:
                storage: 5Gi
        cache:
          mount:
            mountPath: "/var/lib/cache"
          spec:
            resources:
              requests:
                storage: 2Gi
    asserts:
      - hasDocuments:
          count: 3

  - it: renders a PersistentVolumeClaim with volume mode
    set:
      persistentVolumeClaims:
        block-storage:
          mount:
            mountPath: "/var/lib/block-storage"
          spec:
            volumeMode: Block
            resources:
              requests:
                storage: 100Gi
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - equal:
          path: spec.volumeMode
          value: Block

  - it: renders a PersistentVolumeClaim with labels and annotations
    set:
      persistentVolumeClaims:
        database:
          mount:
            mountPath: "/var/lib/database"
          metadata:
            labels:
              storage-type: database
              tier: persistent
            annotations:
              volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/aws-ebs
              description: "Database storage volume"
          spec:
            resources:
              requests:
                storage: 20Gi
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - equal:
          path: metadata.labels["storage-type"]
          value: database
      - equal:
          path: metadata.labels["tier"]
          value: persistent
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: base-test
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: RELEASE-NAME
      - equal:
          path: metadata.annotations["volume.beta.kubernetes.io/storage-provisioner"]
          value: kubernetes.io/aws-ebs
      - equal:
          path: metadata.annotations["description"]
          value: "Database storage volume"

  - it: should not render when persistentVolumeClaims is empty
    set:
      persistentVolumeClaims: {}
    asserts:
      - hasDocuments:
          count: 0

  - it: should not render when persistentVolumeClaims is not defined
    asserts:
      - hasDocuments:
          count: 0

  - it: should render with default access modes when not specified
    set:
      persistentVolumeClaims:
        data:
          mount:
            mountPath: "/var/lib/data"
          spec:
            resources:
              requests:
                storage: 10Gi
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - contains:
          path: spec.accessModes
          content: ReadWriteOnce
      - lengthEqual:
          path: spec.accessModes
          count: 1

  - it: should not render annotations when empty
    set:
      persistentVolumeClaims:
        data:
          metadata:
            annotations: {}
          mount:
            mountPath: "/var/lib/data"
          spec:
            resources:
              requests:
                storage: 10Gi
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - notExists:
          path: metadata.annotations

  - it: renders PersistentVolumeClaim with selector
    set:
      persistentVolumeClaims:
        selective-storage:
          mount:
            mountPath: "/var/lib/selective-storage"
          spec:
            selector:
              matchLabels:
                type: ssd
                zone: us-east-1a
            resources:
              requests:
                storage: 15Gi
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - equal:
          path: spec.selector.matchLabels.type
          value: ssd
      - equal:
          path: spec.selector.matchLabels.zone
          value: us-east-1a

  - it: renders PersistentVolumeClaim with resource limits
    set:
      persistentVolumeClaims:
        limited-storage:
          mount:
            mountPath: "/var/lib/limited-storage"
          spec:
            resources:
              requests:
                storage: 5Gi
              limits:
                storage: 10Gi
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - equal:
          path: spec.resources.requests.storage
          value: 5Gi
      - equal:
          path: spec.resources.limits.storage
          value: 10Gi

  - it: should not render when disabled
    set:
      persistentVolumeClaims:
        disabled-pvc:
          enabled: false
          mount:
            mountPath: "/var/lib/disabled-pvc"
          spec:
            resources:
              requests:
                storage: 10Gi
        enabled-pvc:
          enabled: true
          spec:
            resources:
              requests:
                storage: 5Gi
    asserts:
      - hasDocuments:
          count: 0

  - it: renders PersistentVolumeClaim with templated values
    release:
      name: test-app
      namespace: production
    set:
      persistentVolumeClaims:
        templated:
          mount:
            mountPath: "/var/lib/templated"
          metadata:
            annotations:
              app-name: "{{ .Release.Name }}"
              namespace: "{{ .Release.Namespace }}"
          spec:
            storageClassName: "{{ .Release.Name }}-storage"
            resources:
              requests:
                storage: 10Gi
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - equal:
          path: metadata.name
          value: test-app-base-test-templated
      - equal:
          path: metadata.annotations["app-name"]
          value: test-app
      - equal:
          path: metadata.annotations["namespace"]
          value: production
      - equal:
          path: spec.storageClassName
          value: test-app-storage

  - it: renders PersistentVolumeClaim with data source
    set:
      persistentVolumeClaims:
        cloned-storage:
          mount:
            mountPath: "/var/lib/cloned-storage"
          spec:
            dataSource:
              kind: PersistentVolumeClaim
              name: source-pvc
            resources:
              requests:
                storage: 10Gi
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - equal:
          path: spec.dataSource.kind
          value: PersistentVolumeClaim
      - equal:
          path: spec.dataSource.name
          value: source-pvc

  - it: renders PersistentVolumeClaim with data source ref
    set:
      persistentVolumeClaims:
        snapshot-storage:
          mount:
            mountPath: "/var/lib/snapshot-storage"
          spec:
            dataSourceRef:
              kind: VolumeSnapshot
              name: my-snapshot
              apiGroup: snapshot.storage.k8s.io
            resources:
              requests:
                storage: 20Gi
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - equal:
          path: spec.dataSourceRef.kind
          value: VolumeSnapshot
      - equal:
          path: spec.dataSourceRef.name
          value: my-snapshot
      - equal:
          path: spec.dataSourceRef.apiGroup
          value: snapshot.storage.k8s.io

  - it: renders complex PersistentVolumeClaim with all features
    set:
      persistentVolumeClaims:
        complex-storage:
          mount:
            mountPath: "/var/lib/complex-storage"
          metadata:
            labels:
              storage-type: database
              environment: production
              backup: "true"
            annotations:
              volume.beta.kubernetes.io/storage-provisioner: ebs.csi.aws.com
              volume.kubernetes.io/selected-node: worker-node-1
              description: "Complex storage with all features"
          spec:
            accessModes:
              - ReadWriteOnce
            volumeMode: Filesystem
            storageClassName: gp3-encrypted
            selector:
              matchLabels:
                type: ssd
                performance: high
            dataSource:
              kind: PersistentVolumeClaim
              name: backup-pvc
            resources:
              requests:
                storage: 100Gi
              limits:
                storage: 200Gi
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-complex-storage
      - equal:
          path: metadata.labels["storage-type"]
          value: database
      - equal:
          path: metadata.labels["environment"]
          value: production
      - equal:
          path: metadata.labels["backup"]
          value: "true"
      - equal:
          path: metadata.annotations["volume.beta.kubernetes.io/storage-provisioner"]
          value: ebs.csi.aws.com
      - equal:
          path: metadata.annotations["description"]
          value: "Complex storage with all features"
      - equal:
          path: spec.volumeMode
          value: Filesystem
      - equal:
          path: spec.storageClassName
          value: gp3-encrypted
      - equal:
          path: spec.selector.matchLabels.type
          value: ssd
      - equal:
          path: spec.dataSource.kind
          value: PersistentVolumeClaim
      - equal:
          path: spec.resources.requests.storage
          value: 100Gi
      - equal:
          path: spec.resources.limits.storage
          value: 200Gi

  - it: should render when enabled is not specified (defaults to true)
    set:
      persistentVolumeClaims:
        default-enabled:
          mount:
            mountPath: "/var/lib/default-enabled"
          spec:
            resources:
              requests:
                storage: 5Gi
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: PersistentVolumeClaim
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test-default-enabled

  - it: should not render when storage is missing
    skip:
      reason: "needs investigation"
    set:
      persistentVolumeClaims:
        no-spec:
          enabled: true
    asserts:
      - hasDocuments:
          count: 0

  - it: should not render when storage is null
    set:
      persistentVolumeClaims:
        mount:
          mountPath: "/var/lib/mount"
        null-spec:
          enabled: true
          spec:
            resources:
              requests:
                storage: null
    asserts:
      - hasDocuments:
          count: 0
