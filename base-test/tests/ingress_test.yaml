suite: Ingress template
templates:
  - templates/ingress.tpl

tests:
  - it: renders an Ingress with basic configuration
    set:
      ingress:
        spec:
          rules:
            "example.com":
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test
      - equal:
          path: spec.rules[0].host
          value: example.com

  - it: renders an Ingress with multiple hosts
    set:
      ingress:
        spec:
          rules:
            "api.example.com":
              http:
                paths:
                  "/api":
                    backend:
                      service:
                        port:
                          name: http
            "www.example.com":
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - lengthEqual:
          path: spec.rules
          count: 2
      - contains:
          path: spec.rules
          content:
            host: api.example.com
            http:
              paths:
              - backend:
                  service:
                    name: RELEASE-NAME-base-test
                    port:
                      name: http
                path: /api
                pathType: Prefix
      - contains:
          path: spec.rules
          content:
            host: www.example.com
            http:
              paths:
              - backend:
                  service:
                    name: RELEASE-NAME-base-test
                    port:
                      name: http
                path: /
                pathType: Prefix

  - it: renders an Ingress with TLS configuration per host
    set:
      ingress:
        spec:
          rules:
            "example.com":
              tls:
                secretName: example-tls
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - lengthEqual:
          path: spec.tls
          count: 1
      - equal:
          path: spec.tls[0].secretName
          value: example-tls
      - contains:
          path: spec.tls[0].hosts
          content: example.com

  - it: renders an Ingress with multiple TLS configurations
    set:
      ingress:
        spec:
          rules:
            "api.example.com":
              tls:
                secretName: api-tls
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
            "www.example.com":
              tls:
                secretName: www-tls
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - lengthEqual:
          path: spec.tls
          count: 2
      - contains:
          path: spec.tls
          content:
            secretName: api-tls
            hosts:
              - api.example.com
      - contains:
          path: spec.tls
          content:
            secretName: www-tls
            hosts:
              - www.example.com

  - it: renders an Ingress with grouped TLS hosts
    set:
      ingress:
        spec:
          rules:
            "api.example.com":
              tls:
                secretName: shared-tls
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
            "www.example.com":
              tls:
                secretName: shared-tls
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - lengthEqual:
          path: spec.tls
          count: 1
      - equal:
          path: spec.tls[0].secretName
          value: shared-tls
      - lengthEqual:
          path: spec.tls[0].hosts
          count: 2

  - it: renders an Ingress with custom path types
    set:
      ingress:
        spec:
          rules:
            "example.com":
              http:
                paths:
                  "/exact":
                    pathType: Exact
                    backend:
                      service:
                        port:
                          name: http
                  "/prefix":
                    pathType: Prefix
                    backend:
                      service:
                        port:
                          name: http
                  "/regex":
                    pathType: ImplementationSpecific
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - lengthEqual:
          path: spec.rules[0].http.paths
          count: 3
      - contains:
          path: spec.rules[0].http.paths
          content:
            path: /exact
            pathType: Exact
            backend:
              service:
                name: RELEASE-NAME-base-test
                port:
                  name: http
      - contains:
          path: spec.rules[0].http.paths
          content:
            path: /prefix
            pathType: Prefix
            backend:
              service:
                name: RELEASE-NAME-base-test
                port:
                  name: http
      - contains:
          path: spec.rules[0].http.paths
          content:
            path: /regex
            pathType: ImplementationSpecific
            backend:
              service:
                name: RELEASE-NAME-base-test
                port:
                  name: http

  - it: renders an Ingress with custom backend service
    set:
      ingress:
        spec:
          rules:
            "example.com":
              http:
                paths:
                  "/":
                    pathType: Prefix
                    backend:
                      service:
                        name: custom-service
                        port:
                          number: 8080
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: custom-service
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 8080

  - it: renders an Ingress with annotations
    set:
      ingress:
        metadata:
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
            cert-manager.io/cluster-issuer: letsencrypt
            kubernetes.io/ingress.class: nginx
        spec:
          rules:
            "example.com":
              http:
                paths:
                  "/api":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: metadata.annotations["nginx.ingress.kubernetes.io/rewrite-target"]
          value: /
      - equal:
          path: metadata.annotations["cert-manager.io/cluster-issuer"]
          value: letsencrypt
      - equal:
          path: metadata.annotations["kubernetes.io/ingress.class"]
          value: nginx

  - it: renders Ingress with custom labels
    set:
      ingress:
        metadata:
          labels:
            custom-label: custom-value
            environment: production
            tier: frontend
        spec:
          rules:
            "example.com":
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: metadata.labels["custom-label"]
          value: custom-value
      - equal:
          path: metadata.labels["environment"]
          value: production
      - equal:
          path: metadata.labels["tier"]
          value: frontend
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: base-test
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: RELEASE-NAME

  - it: renders Ingress with both custom labels and annotations
    set:
      ingress:
        metadata:
          labels:
            team: platform
          annotations:
            description: "Main application ingress"
            owner: "platform-team"
        spec:
          rules:
            "example.com":
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: metadata.labels["team"]
          value: platform
      - equal:
          path: metadata.annotations["description"]
          value: "Main application ingress"
      - equal:
          path: metadata.annotations["owner"]
          value: "platform-team"

  - it: renders Ingress with templated values
    release:
      name: test-app
      namespace: production
    set:
      ingress:
        metadata:
          annotations:
            app-name: "{{ .Release.Name }}"
            namespace: "{{ .Release.Namespace }}"
        spec:
          rules:
            "{{ .Release.Name }}.example.com":
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: metadata.annotations["app-name"]
          value: test-app
      - equal:
          path: metadata.annotations["namespace"]
          value: production
      - equal:
          path: spec.rules[0].host
          value: test-app.example.com

  - it: should not render Ingress with empty metadata annotations
    set:
      ingress:
        metadata:
          annotations: {}
        spec:
          rules:
            "example.com":
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - notExists:
          path: metadata.annotations

  - it: renders Ingress with ingressClassName
    set:
      ingress:
        spec:
          ingressClassName: nginx
          rules:
            "example.com":
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: spec.ingressClassName
          value: nginx

  - it: renders Ingress with default backend
    set:
      ingress:
        spec:
          defaultBackend:
            service:
              name: default-service
              port:
                number: 80
          rules:
            "example.com":
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: spec.defaultBackend.service.name
          value: default-service
      - equal:
          path: spec.defaultBackend.service.port.number
          value: 80

  - it: renders Ingress with mixed path configurations
    set:
      ingress:
        spec:
          rules:
            "api.example.com":
              http:
                paths:
                  "/v1":
                    pathType: Prefix
                    backend:
                      service:
                        name: api-v1
                        port:
                          name: http
                  "/v2":
                    pathType: Prefix
                    backend:
                      service:
                        name: api-v2
                        port:
                          number: 8080
    asserts:
      - isKind:
          of: Ingress
      - lengthEqual:
          path: spec.rules[0].http.paths
          count: 2
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.name
          value: http
      - equal:
          path: spec.rules[0].http.paths[1].backend.service.port.number
          value: 8080

  - it: should not render when ingress is disabled
    set:
      ingress:
        enabled: false
        spec:
          rules:
            "example.com":
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - hasDocuments:
          count: 0

  - it: should not render when ingress rules are empty
    set:
      ingress:
        enabled: true
        spec:
          rules: {}
    asserts:
      - hasDocuments:
          count: 0

  - it: should not render when ingress rules are not defined
    set:
      ingress:
        enabled: true
        spec: {}
    asserts:
      - hasDocuments:
          count: 0

  - it: should render with default enabled state
    set:
      ingress:
        spec:
          rules:
            "example.com":
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-test

  - it: renders Ingress with wildcard host
    set:
      ingress:
        spec:
          rules:
            "*.example.com":
              http:
                paths:
                  "/":
                    backend:
                      service:
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: spec.rules[0].host
          value: "*.example.com"

  - it: renders complex multi-service Ingress
    set:
      ingress:
        metadata:
          annotations:
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            cert-manager.io/cluster-issuer: letsencrypt-prod
        spec:
          ingressClassName: nginx
          rules:
            "app.example.com":
              tls:
                secretName: app-tls
              http:
                paths:
                  "/":
                    backend:
                      service:
                        name: frontend
                        port:
                          number: 80
                  "/api":
                    backend:
                      service:
                        name: backend
                        port:
                          number: 8080
                  "/admin":
                    backend:
                      service:
                        name: admin
                        port:
                          name: http
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: spec.ingressClassName
          value: nginx
      - lengthEqual:
          path: spec.rules[0].http.paths
          count: 3
      - lengthEqual:
          path: spec.tls
          count: 1
      - equal:
          path: spec.tls[0].secretName
          value: app-tls
      - contains:
          path: spec.tls[0].hosts
          content: app.example.com
