suite: Secrets template
templates:
  - templates/secrets.tpl

tests:
  - it: renders Secrets with environment variables
    skip:
      reason: "Need to verify Secret type implementation"
    set:
      secrets:
        envVars:
          data:
            DATABASE_PASSWORD: secret-password
            API_KEY: secret-api-key
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-env-vars
      - equal:
          path: type
          value: Opaque
      - isNotEmpty:
          path: data.DATABASE_PASSWORD
      - isNotEmpty:
          path: data.API_KEY

  - it: renders Secrets with file data
    set:
      secrets:
        files:
          data:
            "tls.crt": |
              -----BEGIN CERTIFICATE-----
              MIICert...
              -----END CERTIFICATE-----
            "tls.key": |
              -----BEGIN PRIVATE KEY-----
              MIIKey...
              -----END PRIVATE KEY-----
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-files
      - isNotEmpty:
          path: data["tls.crt"]
      - isNotEmpty:
          path: data["tls.key"]

  - it: renders multiple Secrets when both files and envVars are defined
    set:
      secrets:
        files:
          data:
            "cert.pem": "certificate content"
        envVars:
          data:
            SECRET_TOKEN: token-value
    asserts:
      - hasDocuments:
          count: 2

  - it: renders Secret with custom name and type
    set:
      secrets:
        tls-secret:
          type: kubernetes.io/tls
          data:
            tls.crt: certificate-data
            tls.key: private-key-data
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-base-tls-secret
      - equal:
          path: type
          value: kubernetes.io/tls

  - it: renders Secret with labels and annotations
    skip:
      reason: "Need to verify metadata implementation in template"
    set:
      secrets:
        envVars:
          metadata:
            labels:
              secret-type: database
            annotations:
              vault.security.banzaicloud.io/vault-role: database
          data:
            DB_PASSWORD: secret
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.labels["secret-type"]
          value: database
      - equal:
          path: metadata.annotations["vault.security.banzaicloud.io/vault-role"]
          value: database

  - it: should not render when secrets is not defined
    skip:
      reason: "Need to implement conditional rendering in template"
    asserts:
      - hasDocuments:
          count: 0